1.插件的基本要点：
	1)jQuery插件的文件名推荐名为jquery.[插件名].js,以免和其他JavaScript库插件混淆
	2)所有的对象方法都应当附加到jQuery.fn对象上,而所有的全局函数都应当附加到jQuery对象本身上
	3)在插件内部,this指向的是当前通过选择器获取的jQuery对象,而不像一般的方法那样,例如click()方法,内部的this指向DOM元素
	4)可以通过this.each来遍历所有元素
	5)所有的方法或函数插件,都应当以分号结尾,否则压缩的时候可能出现问题.为了更稳妥些,甚至可以在插件头部先加上一个分号,
		以免他人的不规范代码,给插件带来影响
	6)插件应该返回一个jQuery对象,以保证插件的可链式操作.除非插件需要返回的是一些需要获取的量,例如字符串或者数组等
	7)避免在插件内部使用$作为jQuery对象的别名,而应使用完整的jQuery来标示.这样可以避免冲突.
		当然,也可以利用闭包这种技巧来回避这个问题,使插件内部继续使用$作为jQuery的别名.很多插件都是这么做的

2.插件中的闭包
	关于闭包,ECMAScript对其进行了简单的描述:允许使用内部函数(即函数定义和函数表达式位于另一个函数的函数体内),
	而且,这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数,当其中一个这样的
	内部函数在包含它们的外部函数之外被调用,就会形成闭包.即内部函数会在外部函数返回后被执行.而当这个内部函数执行时,
	它仍然必须访问其外部函数的局部变量、参数以及其他内部函数.这些局部变量、参数和函数的声明(最初时)的值是外部函数返回时的值,
	但也会受到内部函数的影响
	利用闭包的特性,既可以避免内部临时变量影响全局变量,又可以在插件内部继续使用$作为jQuery的别名.
	常见的jQuery插件都是以下这种形式的：
		(function(){
			/* 代码 */
		})();
	首先定义一个匿名函数function(){/* 代码 */},然后用括号括起来,变成(function(){/* 代码 */})这种形式,
	最后用()这个运算符来执行.可以传递参数进去,以供内部函数使用
		//注意为了更好的兼容性,开始前有个分号
		;(function($){	//此处将$作为匿名函数的形参
			/* 代码 */
		})(jQuery);		//这里就将jQuery作为实参传递给匿名函数了

例：
	;(function($){
		//这里编写插件的代码,可以继续使用$作为jQuery的别名
		//定义一个局部变量foo,仅函数内部可以访问,外部无法访问
		var foo;
		var bar = function(){
			/* 
				在匿名函数内部的函数都可以访问foo,即使是在匿名函数的外部
				调用bar()的时候,也可以在bar()的内部访问到foo,但在匿名函数
				的外部直接访问foo是做不到的
			*/
		}
		
		/* 
			下面的语句让匿名函数内部的函数bar()逃逸到全局可访问的范围内
			这样就可以在匿名函数的外部通过调用jQuery.BAR()来访问内部定义
			的函数bar(),并且内部函数bar()也能访问匿名函数内部的变量foo
		*/
		$.BAR=bar;
	})(jQuery);		//这里就将jQuery作为实参传递给匿名函数了

